{"name":"Axrest","tagline":"","body":"AxREST\r\n======\r\n\r\nA simple RESTful service to maintain a database table of users.\r\n\r\nRequirements\r\n------------\r\n\r\n-   PHP v5.3.1+\r\n-   MySQL v5.1+\r\n\r\n### Libraries\r\n\r\n-   [Tonic v3.1+](https://github.com/peej/tonic/tree/v3.1) for the RESTful service.\r\n-   [phpspec2](http://phpspec.net) for the unit testing.\r\n\r\nHow To\r\n------\r\n\r\n###Local Set-up\r\n\r\nI am using Composer to get all required libraries for the system.\r\n\r\nTo set up run the following commands in the project root folder: (assumption of running Linux OS)\r\n\r\n    curl http://getcomposer.org/installer | php\r\n    php composer.phar install --dev\r\n\r\n###MySQL Table\r\n\r\nA user is comprised of the following fields:\r\n\r\n-   `name` This is a string limited to 150 characters.\r\n-   `email` This is a string limited to 255 characters. The email address is validated using PHP's `filter_var` function with the flag `FILTER_VALIDATE_EMAIL`.\r\n-   `password` This is a string and must be at least 3 characters long. It is then hashed using SHA256.\r\n-   `dateOfBirth` This is a string and must be in the format of `yyyy-mm-dd` e.g. `1975-03-24`. This field is not required and can be left out of the __PUT__ request.\r\n\r\nThe email address is the Primary Key and so must be Unique.\r\n\r\nThe following SQL will add the table to your database.\r\n\r\n    CREATE TABLE IF NOT EXISTS `user` (\r\n        `name` varchar(150) COLLATE utf8_bin NOT NULL,\r\n        `email` varchar(255) COLLATE utf8_bin NOT NULL,\r\n        `password` varchar(64) COLLATE utf8_bin NOT NULL,\r\n        `dateOfBirth` date DEFAULT NULL,\r\n        PRIMARY KEY (`email`)\r\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\n\r\nTo connect to your database edit the file `./config.php`:\r\n\r\n    // Get the Database details from the Cloud Service.\r\n    $services_json = json_decode(getenv(\"VCAP_SERVICES\"),true);\r\n    $mysql_config = $services_json[\"mysql-5.1\"][0][\"credentials\"];\r\n\r\n    define('PDO_CONN_STRING', 'mysql:host=' . $mysql_config[\"hostname\"] . ';port=' . $mysql_config[\"port\"] . ';dbname=' . $mysql_config[\"name\"] . ';');\r\n    define('PDO_CONN_USER', $mysql_config[\"username\"]);\r\n    define('PDO_CONN_PASS', $mysql_config[\"password\"]);\r\n\r\nIf you are using the AppFrog Cloud hosting you make sure you are using the correct credentials set. Otherwise change the `PDO_*` constants to suit your connection details.\r\n\r\n###Unit Testing\r\n\r\nYou will need to set up a database, with the user table above, that the service can be run against. Once you have that done update the connection details in `/spec/config.php`\r\n\r\nTo run the unit tests, run the following command in the root folder of the project:\r\n\r\n    bin/phpspec run\r\n\r\n###Use Service\r\n\r\n####PUT\r\n\r\nWe use __PUT__ to create a new user in the database. Requests for this are sent to `/`\r\n\r\n__Example Request__:\r\n\r\nURL:\r\n\r\n    /\r\n\r\nHeaders:\r\n\r\n    Content-Type: application/json\r\n\r\nRaw Data:\r\n\r\n    {\r\n        \"name\"          : \"Test User\",\r\n        \"email\"         : \"test@user.com\",\r\n        \"password\"      : \"asdqwe\"\r\n    }\r\n\r\n__Example Response__:\r\n\r\nHeaders:\r\n\r\n    Content-Type: application/json\r\n    Location: /test@user.com\r\n\r\nBody:\r\n\r\n    {\r\n        \"message\": \"User successfully created.\"\r\n    }\r\n\r\n####GET\r\n\r\nThere are two calls to __GET__:\r\n\r\n1.  The first is `/`, this will return an object containing a message and an array containing all users within the database.\r\n\r\n    __Example Request__:\r\n\r\n    URL:\r\n\r\n        /\r\n\r\n    __Example Response__:\r\n\r\n    Headers:\r\n\r\n        Content-Type: application/json\r\n\r\n    Body:\r\n\r\n        {\r\n            \"message\": \"Success.\",\r\n            \"users\": [{\r\n                \"name\": \"Test User\",\r\n                \"email\": \"test@user.com\",\r\n                \"password\": \"501bb865d4a92532cfebb65ee059e4889363eeb28a22ca6fb82165bb17432724\",\r\n                \"dateOfBirth\": null\r\n            }, {\r\n                \"name\": \"Test User 2\",\r\n                \"email\": \"test@user2.com\",\r\n                \"password\": \"074519e2ef816d6c5acc77af06206722301b5109ddeef9d2bac3f30ff7e8d7b3\",\r\n                \"dateOfBirth\": null\r\n            }]\r\n        }\r\n\r\n2.  The second is `/:identity`, where `:identity` is the email address of the user you are looking for.\r\n\r\n    This will return an object with a message and an object containing the user.\r\n\r\n    __Example Request__:\r\n\r\n    URL:\r\n\r\n        /test@user.com\r\n\r\n    __Example Response__:\r\n\r\n    Headers:\r\n\r\n        Content-Type: application/json\r\n\r\n    Body:\r\n\r\n        {\r\n            \"message\"   : \"Success.\",\r\n            \"user\"      : {\r\n                \"name\"          : \"Test User\",\r\n                \"email\"         : \"test@user.com\",\r\n                \"password\"      : \"05f4a1dd829dcf0f11617780634a22dbde6ad638cc2ee943ef9c258f1b1c4058\",\r\n                \"dateOfBirth\"   : null\r\n            }\r\n        }\r\n\r\n####POST\r\n\r\nWe use __POST__ to update an existing user. This is done by specifying the `:identity` that we want to update and posting data.\r\n\r\n__Example Request__:\r\n\r\nURL:\r\n\r\n    /test@user2.com\r\n\r\nHeaders:\r\n\r\n    Content-Type: application/json\r\n\r\nRaw Data:\r\n\r\n    {\r\n        \"dateOfBirth\"   : \"1975-03-24\"\r\n    }\r\n\r\n__Example Response__:\r\n\r\nHeaders:\r\n\r\n    Content-Type: application/json\r\n    Location: /test@user.com\r\n\r\nBody:\r\n\r\n    {\r\n        \"message\": \"The user has been successfully updated.\"\r\n    }\r\n\r\n####DELETE\r\n\r\nWhen we want to delete a user from the table we use the __DELETE__ method. As with __POST__ we specify the `:identity` of the user to be deleted.\r\n\r\n__Example Request__:\r\n\r\nURL:\r\n\r\n    /test@user.com\r\n\r\n__Example Response__:\r\n\r\nHeaders:\r\n\r\n    Content-Type: application/json\r\n\r\nBody:\r\n\r\n    {\r\n        \"message\": \"The user has been successfully deleted.\"\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}